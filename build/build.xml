<?xml version="1.0"?>
<!-- ======================================================================
Build a new distribution of Ortus CommandBox:
This build downloads required libs depending on the target.

External Dependencies:
- lucee-cli
- launch4j
====================================================================== -->
<project name="distro.build" default="build.cli" basedir="./" xmlns:antcontrib="antlib:net.sf.antcontrib">
	 <description>
    	Build a new distribution of Ortus CommandBox
    </description>

    <!-- Version: UPDATE ON EACH RELEASE AS NEEDED -->
 	<property name="distro.groupID"				value="ortussolutions" />
 	<property name="distro.name"				value="commandbox"/>
 	<!-- Special things happen when the version and stableVersion are the same value as that signifies a "stable" build.   -->
 	<property name="commandbox.version"			value="5.8.0"/>
 	<property name="commandbox.stableVersion"	value="5.8.0"/>

    <!-- Time Label -->
	<tstamp prefix="start"/>
	<!-- Load build lib tasks -->
	<path id="build.antcontrib.libpath">
		<fileset dir="${basedir}/lib">
			<include name="**/*.jar" />
		</fileset>
	</path>
	<property name="build.location"  location="${basedir}"/>

	<!-- Define Tasks -->
	<taskdef resource="net/sf/antcontrib/antlib.xml" classpathref="build.antcontrib.libpath" />
	<!-- Import Box-Repo Tasks -->
	<import><url url="https://raw.githubusercontent.com/Ortus-Solutions/box-tasks/master/box-repo.xml"/></import>

	<!-- Default environment check, if not passed via -Denvironment -->
	<condition property="environment" value="local">
		<not><isset property="environment" /></not>
	</condition>
	<if>
		<available file="build-${environment}.properties" />
		<then>
			<!-- Load env properties -->
			<echo>Loading properties from environment: ${environment}</echo>
			<loadproperties srcFile="build-${environment}.properties"/>
		</then>
	</if>
	<!-- Load root properties -->
	<echo>Loading base properties</echo>
	<loadproperties srcFile="build.properties"/>

	<!-- Load secret properties -->
	<property file="/var/lib/jenkins/creds/secret.properties"/>
	<property name="ortus.sign.keyring" value=""/>
	<property name="ortus.sign.key.id" value=""/>
	<property name="ortus.sign.key.passphrase" value=""/>

	<echo message="ortus.sign.keyring: ${ortus.sign.keyring}" />

	<!-- import cfdistro -->
	<import file="${cfdistro.build.file}"/>
	<property name="maven.repo.local" value="${cfdistro.basedir}/artifacts"/>

	<if>
	    <equals arg1="${commandbox.version}" arg2="${commandbox.stableVersion}"/>
	    <then>
		 	<property name="isStable"	value="true"/>
	    </then>
	    <else>
		 	<property name="isStable"	value="false"/>
	    </else>
	</if>

    <propertyregex property="commandbox.version.noPrereleaseID"
           input="${commandbox.version}"
           regexp="([0-9]*\.[0-9]*\.[0-9]*).*"
           select="\1" />

	<!-- Init Build -->
	<target name="init" description="Init build" unless="src.isInit">
		<!-- cleanup -->
		<delete dir="${temp.dir}" />
		<delete dir="${build.dir}" />
		<delete dir="${lib.dir}"/>
		<delete dir="${lib-light.dir}"/>
		<delete dir="${dist.dir}"/>

		<!-- init dirs -->
		<mkdir dir="${lib-light.dir}" />
		<mkdir dir="${dist.dir}" />
		<mkdir dir="${build.dir}"/>
		<mkdir dir="${temp.dir}/cli-light" />
		<chmod file="${build.dir}/**" perm="g+wxrs" type="both" />

		<!-- Increment Build Number -->
		<propertyfile file="build.number" comment="Build Number for ANT. Edit not!">
			<entry key="build.number"
					type="int"
			     	operation="+"
					pattern="00000"
			     	default="1" />
		</propertyfile>
		<!-- Retrieve Build Number -->
		<property file="build.number"/>

		<!-- Create version file -->
		<echo file="${build.dir}/.version" append="false">${commandbox.version}+${build.number}</echo>

		<!-- If stg, change perms and owners -->
		<antcall target="update.permissions" />

		<!-- Mark as init -->
		<property name="src.isInit" value="true" />
	</target>

	<!-- create script to run built commandbox using sources (for core cfml development) -->
	<target name="build.runsrc" description="script to run built commandbox using sources">
	    <property name="tmpHome" location="${temp.dir}/tmpcmdboxhome" />
	    <property name="bootstrap" location="${src.dir}/cfml/system/Bootstrap.cfm" />
	    <property name="cmd" value='java -jar box.jar -CommandBox_home="${tmpHome}" "${bootstrap}"' />
	    <delete dir="${tmpHome}" />
	    <echo file="${dist.dir}/runsrc.sh" message="${cmd}" />
	    <chmod file="${dist.dir}/runsrc.sh" perm="+x" />
	    <echo file="${dist.dir}/runsrc.bat" message="${cmd}" />
	</target>

	<!-- update permissions on reports -->
	<target name="update.permissions" description="Update staging server permissions">
		<!-- Integration permissions -->
		<if>
			<equals arg1="${environment}" arg2="auto" />
			<then>
				<chmod file="${temp.dir}/**" perm="go+wrs" type="both" verbose="true" />
				<chown owner="stg-ortus" verbose="true">
					<fileset dir="${temp.dir}" />
				</chown>
			</then>
			<else>
			</else>
		</if>
	</target>

	<!-- Build everything -->
	<target name="build.cli.all" depends="build.cli.deb,build.cli.exe,build.cli.jre,build.cli.rpm,build.apidocs,build.homebrew">
		<antcontrib:if>
			<equals arg1="${build.type}" arg2="auto" />
			<then>
				<!-- Remove Unnecessary build files from repo, so to not confuse -->
				<delete>
					<fileset file="${dist.dir}/box" />
					<fileset file="${dist.dir}/box.exe" />
				</delete>
				<!-- BE API Docs
				<unzip src="${dist.dir}/${distro.name}-apidocs-${commandbox.version}.zip" dest="${artifact.dir}/be-apidocs" overwrite="true"/>
				-->
			</then>
		</antcontrib:if>
	</target>

	<!-- Build CLI -->
	<target name="build.cli" description="builds box.jar" depends="init,resolve.libs">

		<!-- Copy libs to engine destination -->
		<mkdir dir="${lucee.lib.dir}" />
		<mkdir dir="${lucee-light.lib.dir}" />

		<copy todir="${lucee.lib.dir}">
	      <fileset dir="${lib.dir}" includes="*.jar" />
	    </copy>

   		<echo message="move core file" />

		<!-- Unzip the Lucee Light jar so we can pull out the core.lco file -->
 		<unzip src="${lucee.light.file}" dest="${temp.dir}/lucee-light-jar/" overwrite="true"/>
	    <move todir="${temp.dir}">
			<fileset dir="${temp.dir}/lucee-light-jar/core/">
				<include name="core.lco" />
			</fileset>
		</move>

		<!-- unzip the core.lco file (really a jar) so we can modify the manifest to inject the extensions we need to load -->
 		<unzip src="${temp.dir}/core.lco" dest="${temp.dir}/lucee-light-core/" overwrite="true"/>
 		<manifest file="${temp.dir}/lucee-light-core/META-INF/MANIFEST.MF" mode="update">
			<attribute name="Require-Extension" value="${cfml.extensions}"/>
		</manifest>

		<!-- Re-zip core file] -->
		<zip destfile="${temp.dir}/core.lco" update="true">
	      <fileset dir="${temp.dir}/lucee-light-core/"/>
	    </zip>

		<!-- Rename core file so it will get loaded -->
		<rename src="${temp.dir}/core.lco" dest="${temp.dir}/${cfml.version}.lco"/>

    	<delete file="${lucee.light.file}" />

		<!-- re-zip the lucee-light.jar -->
		<zip destfile="${lucee.light.file}" update="true">
	      <fileset dir="${temp.dir}/lucee-light-jar/"/>
	    </zip>

		<copy todir="${lucee-light.lib.dir}">
	      <fileset dir="${lib.dir}" includes="*.jar" excludes="*lucee-*.jar" />
	      <fileset dir="${lib-light.dir}" includes="*.jar" />
	    </copy>
		<mkdir dir="${temp.dir}/engine" />

		<!-- Prepare Compile Path -->
		<path id="classpath">
			<fileset dir="${lucee.lib.dir}"/>
			<fileset dir="${lib.dir}"/>
		</path>

		<!-- Compile java source -->
		<mkdir dir="${temp.dir}/cli/bin" />
		<javac srcdir="${src.dir}/java"
			   destdir="${temp.dir}/cli/bin"
			   source="${java.compiler}"
			   target="${java.compiler}"
			   classpath="${toString:classpath}"
			   debug="${java.debug}" />

		<!-- Configure Lucee Web Dir -->
		<configure-lucee-web
		      config-server="${temp.dir}/engine/cfml/cli/lucee-server/context/lucee-server.xml"
		      config-web="${temp.dir}/engine/cfml/cli/cfml-web/lucee-web.xml.cfm"
		      dump-cfc="${temp.dir}/engine/cfml/cli/lucee-server/context/library/tag/Dump.cfc"/>
		<antcontrib:var name="lucee.config.file" value="${temp.dir}/engine/cfml/cli/cfml-web/lucee-web.xml.cfm" />

		<!-- update lucee password -->
		<lucee-password
	      server-password="commandbox" config-server-file="${temp.dir}/engine/cfml/cli/lucee-server/context/lucee-server.xml"
	      web-password="commandbox" config-web-file="${temp.dir}/engine/cfml/cli/cfml-web/lucee-web.xml.cfm"
	    />

		<!-- update lucee error template path -->
		<!-- Copy Error Template From Our Resources -->
		<copy file="${src.dir}/resources/error-cli.cfm" todir="${temp.dir}/engine/cfml/cli/cfml-web/context/templates/error/" encoding="UTF-8"/>
		<lucee-error-template path="/lucee/templates/error/error-cli.cfm"
	      configfile="${temp.dir}/engine/cfml/cli/cfml-web/lucee-web.xml.cfm" />

		<!-- Turn of the default time server setting in Lucee -->
		<replaceregexp
			file="${temp.dir}/engine/cfml/cli/lucee-server/context/lucee-server.xml"
			match='&lt;regional.*/&gt;'
			replace="&lt;regional timeserver=&quot;pool.ntp.org&quot; use-timeserver=&quot;false&quot; /&gt;"
			flags="i"
			encoding="UTF-8" />

		<!-- Copy Resources to build cli bin -->
        <copy todir="${temp.dir}/cli/bin/resource" encoding="UTF-8">
        	<fileset dir="${src.dir}/resources"/>
    	</copy>
    	<copy file="${src.dir}/java/cliloader/cli.properties" todir="${temp.dir}/cli/bin/cliloader" />
		<copy todir="${temp.dir}/cli/bin/cliloader" file="${src.dir}/java/cliloader/version.properties">
	      <filterchain><expandproperties/><deletecharacters chars="\n"/><trim/><ignoreblank/></filterchain>
	    </copy>

		<!-- Zip up the engine -->
		<zip destfile="${temp.dir}/cli/engine.zip">
	      <fileset dir="${temp.dir}/engine"/>
	    </zip>

		<copy todir="${temp.dir}/engine/cfml/cli/lucee-server/context/extensions/available/">
	      <fileset dir="${extensions.dir}" includes="*.lex" />
	    </copy>

	    <move file="${temp.dir}/${cfml.version}.lco" toFile="${temp.dir}/engine/cfml/cli/lucee-server/patches/${cfml.version}.lco" />

		<!-- Zip up the engine-light -->
		<zip destfile="${temp.dir}/cli-light/engine.zip">
	      <fileset dir="${temp.dir}/engine"/>
	    </zip>

		<!-- we put the loader into a jar and then into libs.zip for classloading reasons -->
		<jar destfile="${temp.dir}/cli/luceecli.jar" filesetmanifest="mergewithoutmain" level="9">
			<manifest>
				<attribute name="Main-Class" value="luceecli.CLIMain" />
			</manifest>
			<fileset dir="${temp.dir}/cli/bin">
				<exclude name="cliloader/" />
				<exclude name="com/" />
			</fileset>
		</jar>
		<delete dir="${temp.dir}/cli/bin/luceecli" />

		<!-- Custom Jgit libs -->
		<jar destfile="${temp.dir}/cli/ortus-jgit.jar" filesetmanifest="mergewithoutmain" level="9">
			<fileset dir="${temp.dir}/cli/bin">
				<exclude name="cliloader/" />
				<exclude name="resource/" />
			</fileset>
		</jar>
		<delete dir="${temp.dir}/cli/bin/com" />

		<!-- Copy CommandBox code -->
      	<copy todir="${build.dir}" encoding="UTF-8">
        	<fileset dir="${src.dir}/cfml">
        		<include  name="system/**"/>
        	</fileset>
        	<fileset file="../license.txt"/>
        	<fileset file="../readme.txt"/>
        </copy>

 		<echo message="Replace build version..." />
		<!-- Replace Version Numbers -->
		<replaceregexp match='@build.version@' replace="${commandbox.version}" flags="ig" byline="true" encoding="UTF-8">
		  <fileset dir="${build.dir}">
    		<include name="**/*.cfc"/>
    		<include name="**/*.cfm"/>
		  </fileset>
		</replaceregexp>
 		<echo message="Replace loader version..." />
		<!-- Replace Loader Version Numbers -->
		<replaceregexp match='@build.LoaderVersion@' replace="${cfml.loader.version}" flags="ig" byline="true" encoding="UTF-8">
		  <fileset dir="${build.dir}">
    		<include name="**/*.cfc"/>
    		<include name="**/*.cfm"/>
		  </fileset>
		</replaceregexp>
 		<echo message="Replace build number..." />
		<!-- Replace Build Numbers -->
		<replaceregexp match='@build.number@' replace="${build.number}" flags="ig" byline="true" encoding="UTF-8">
		  <fileset dir="${build.dir}">
    		<include name="**/*.cfc"/>
    		<include name="**/*.cfm"/>
		  </fileset>
		</replaceregexp>
		<!-- Create Version Files -->
		<echo file="${temp.dir}/cli/bin/cliloader/cfml.version" message="${commandbox.version}"/>

		<!--  create the cfml distro zip -->
		<zip destfile="${dist.dir}/${distro.name}-cfml-${commandbox.version}.zip" update="false" level="9">
	        <fileset dir="${build.dir}">
			    <exclude name="box.json"/>
			    <exclude name="modules/**"/>
	        </fileset>
			<zipfileset file="${temp.dir}/cli/bin/cliloader/cfml.version" fullpath=".version"/>
		</zip>
		<copy file="${dist.dir}/${distro.name}-cfml-${commandbox.version}.zip" toFile="${temp.dir}/cli/cfml.zip" overwrite="true" />

		<!-- Build Checksum for commandbox-cfml.zip -->
		<checksum file="${dist.dir}/${distro.name}-cfml-${commandbox.version}.zip" forceoverwrite="true" fileext=".md5" />
		<checksum file="${dist.dir}/${distro.name}-cfml-${commandbox.version}.zip" forceoverwrite="true" algorithm="sha" />
		<checksum file="${dist.dir}/${distro.name}-cfml-${commandbox.version}.zip" forceoverwrite="true" algorithm="SHA-256" fileext=".sha256"/>

		<!--  create the libs zip including cli loader, optionally use pack200 -->
		<zip destfile="${temp.dir}/cli/libs.zip">
			<fileset dir="${lucee.lib.dir}">
				<include name="**/*.jar"/>
				<exclude name="**/lucee-loader.jar"/>
				<exclude name="**/javax*servlet.jar"/>
				<exclude name="**/org*mortbay*jetty.jar"/>
			</fileset>
			<fileset file="${temp.dir}/cli/luceecli.jar" />
			<fileset file="${temp.dir}/cli/ortus-jgit.jar" />
			<fileset file="${src.dir}/resources/log4j2.xml" />
		</zip>

		<!-- Copy our libs to the dist folder -->
		<copy file="${temp.dir}/cli/libs.zip" toFile="${dist.dir}/${distro.name}-libs-${commandbox.version}.zip" overwrite="true" />
		<!-- Build Checksum for commandbox-libs.zip -->
		<checksum file="${dist.dir}/${distro.name}-libs-${commandbox.version}.zip" forceoverwrite="true" fileext=".md5" />
		<checksum file="${dist.dir}/${distro.name}-libs-${commandbox.version}.zip" forceoverwrite="true" algorithm="sha" />
		<checksum file="${dist.dir}/${distro.name}-libs-${commandbox.version}.zip" forceoverwrite="true" algorithm="SHA-256" fileext=".sha256"/>

		<zip destfile="${temp.dir}/cli-light/libs.zip">
			<fileset dir="${lucee-light.lib.dir}">
				<include name="**/*.jar"/>
				<exclude name="**/lucee-loader.jar"/>
				<exclude name="**/javax*servlet.jar"/>
				<exclude name="**/org*mortbay*jetty.jar"/>
			</fileset>
			<fileset file="${temp.dir}/cli/luceecli.jar" />
			<fileset file="${temp.dir}/cli/ortus-jgit.jar" />
			<fileset file="${src.dir}/resources/log4j2.xml" />
		</zip>

		<!-- Copy our light libs to the dist folder -->
		<copy file="${temp.dir}/cli-light/libs.zip" toFile="${dist.dir}/${distro.name}-libs-light-${commandbox.version}.zip" overwrite="true" />
		<!-- Build Checksum for commandbox-libs.zip -->
		<checksum file="${dist.dir}/${distro.name}-libs-light-${commandbox.version}.zip" forceoverwrite="true" fileext=".md5" />
		<checksum file="${dist.dir}/${distro.name}-libs-light-${commandbox.version}.zip" forceoverwrite="true" algorithm="sha" />
		<checksum file="${dist.dir}/${distro.name}-libs-light-${commandbox.version}.zip" forceoverwrite="true" algorithm="SHA-256" fileext=".sha256"/>

	    <!--   </else>
	    </antcontrib:if> -->
	    <delete file="${temp.dir}/cli/luceecli.jar" />
	    <delete file="${temp.dir}/cli/ortus-jgit.jar" />

		<echo file="${temp.dir}/version" message="${cfml.loader.version}" />

		<!-- Create jar -->
        <jar destfile="${dist.dir}/box.jar" filesetmanifest="mergewithoutmain" level="9">
			<manifest>
				<attribute name="Main-Class" value="cliloader.LoaderCLIMain" />
			</manifest>
	        <fileset file="${temp.dir}/cli/libs.zip" />
			<fileset file="${temp.dir}/cli/cfml.zip" />
        	<fileset file="${temp.dir}/cli/engine.zip" />
			<fileset dir="${temp.dir}/cli/bin" />
        	<zipfileset src="${lib.dir}/json-smart-mini-${json-smart-mini.version}.jar" includes="**/*.class" />
        	<fileset file="${temp.dir}/cli/version"/>
		</jar>



		<!-- Now that we have an executable jar, use it to download a few default modules and then update our CFML zip and jar -->
 		<property name="cmdboxhome.arg" value="-CommandBox_home=${build.location}/temp/CommandBoxHome" />
		<delete dir="${cmdboxhome.arg}"/>

		<exec executable="java" dir="${dir.apidocs}" failonerror="true">
			<arg line="-jar ${dist.dir}/box.jar ${cmdboxhome.arg} install ${box.bunndled.modules}" />
		</exec>

		<!--  recreate the cfml distro zip -->
		<zip destfile="${dist.dir}/${distro.name}-cfml-${commandbox.version}.zip" update="false" level="9">
	        <fileset dir="${build.dir}">
			    <exclude name="box.json"/>
			    <exclude name="modules/**"/>
	        </fileset>
	        <fileset dir="${build.location}/temp/CommandBoxHome/cfml/">
			    <include name="modules/**"/>
	        </fileset>
			<zipfileset file="${build.location}/temp/CommandBoxHome/cfml/box.json" fullpath="box-auto-install.json"/>
			<zipfileset file="${temp.dir}/cli/bin/cliloader/cfml.version" fullpath=".version"/>
		</zip>
		<copy file="${dist.dir}/${distro.name}-cfml-${commandbox.version}.zip" toFile="${temp.dir}/cli/cfml.zip" overwrite="true" />

		<!-- recreate jar -->
        <jar destfile="${dist.dir}/box.jar" filesetmanifest="mergewithoutmain" level="9">
			<manifest>
				<attribute name="Main-Class" value="cliloader.LoaderCLIMain" />
			</manifest>
	        <fileset file="${temp.dir}/cli/libs.zip" />
			<fileset file="${temp.dir}/cli/cfml.zip" />
        	<fileset file="${temp.dir}/cli/engine.zip" />
			<fileset dir="${temp.dir}/cli/bin" />
        	<zipfileset src="${lib.dir}/json-smart-mini-${json-smart-mini.version}.jar" includes="**/*.class" />
        	<fileset file="${temp.dir}/cli/version"/>
		</jar>



		<!-- Create Lucee light jar -->
        <jar destfile="${dist.dir}/box-light.jar" filesetmanifest="mergewithoutmain" level="9">
			<manifest>
				<attribute name="Main-Class" value="cliloader.LoaderCLIMain" />
			</manifest>
	        <fileset file="${temp.dir}/cli-light/libs.zip" />
			<fileset file="${temp.dir}/cli/cfml.zip" />
        	<fileset file="${temp.dir}/cli-light/engine.zip" />
			<fileset dir="${temp.dir}/cli/bin" />
        	<zipfileset src="${lib.dir}/json-smart-mini-${json-smart-mini.version}.jar" includes="**/*.class" />
        	<fileset file="${temp.dir}/cli/version"/>
		</jar>

		<!-- Create thin jar -->
        <jar destfile="${dist.dir}/box-thin.jar" filesetmanifest="mergewithoutmain" level="9">
			<manifest>
				<attribute name="Main-Class" value="cliloader.LoaderCLIMain" />
			</manifest>
	        <fileset dir="${temp.dir}/cli/bin" />
        	<zipfileset src="${lib.dir}/json-smart-mini-${json-smart-mini.version}.jar" includes="**/*.class" />
        	<fileset file="${temp.dir}/cli/version"/>
		</jar>

        <!-- Checksum on Jar -->
        <checksum file="${dist.dir}/box.jar" forceoverwrite="true" fileext=".md5" />
        <checksum file="${dist.dir}/box.jar" forceoverwrite="true" algorithm="sha" />
		<checksum file="${dist.dir}/box.jar" forceoverwrite="true" algorithm="SHA-256" fileext=".sha256"/>

        <!-- Checksum on Jar -->
        <checksum file="${dist.dir}/box-thin.jar" forceoverwrite="true" fileext=".md5" />
        <checksum file="${dist.dir}/box-thin.jar" forceoverwrite="true" algorithm="sha" />
		<checksum file="${dist.dir}/box-thin.jar" forceoverwrite="true" algorithm="SHA-256" fileext=".sha256"/>

		<!-- Create box-repo.json -->
		<box-repo location="${artifact.dir}"
				  artifactID="${distro.name}"
				  groupID="${distro.groupID}"
				  buildID="${build.number}"
				  latest="${commandbox.version}"
				  stableVersion="${commandbox.stableVersion}"
				  classifiers="cfml,bin,win,deb,rpm,apidocs"/>


		<if>
			<equals arg1="${isStable}" arg2="true"/>
			<then>
				<property name="previousStableVersion"	value="${cfml.loader.version}"/>
			</then>
			<else>
				<property name="boxLoaderPath" location="${artifact.dir}/box-loader.json"/>
				<get src="https://s3.amazonaws.com/downloads.ortussolutions.com/ortussolutions/commandbox/box-loader.json"
					dest="${boxLoaderPath}"
					verbose="true" />

				<script language="javascript">//<![CDATA[
						var json = new Packages.java.lang.String(
							Packages.java.nio.file.Files.readAllBytes(
								Packages.java.nio.file.Paths.get(project.getProperty("boxLoaderPath"))), "UTF-8");
						var properties = JSON.parse(json);
						project.setProperty('previousStableVersion', properties.versioning.stableVersion );
				//]]></script>
			</else>
		</if>

		<!-- Create box-loader.json -->
		<concat destfile="${artifact.dir}/box-loader.json" overwrite="true">{
			"artifactID" : "commandbox-loader",
			"groupID" : "${distro.groupID}",
			"versioning" : {
				"latestVersion" : "${cfml.loader.version}",
				"latestBuildID" : "${build.number}",
				"latestUpdated" : "${repo.timestamp.DSTAMP}${repo.timestamp.TSTAMP}",
				"stableVersion" : "${previousStableVersion}",
				"versions" : [],
				"classifiers" : ""
			}
		}</concat>

 	</target>



 	<!-- Build Homebrew Recipe -->
 	<target name="build.homebrew" description="Builds the Homebrew Recipe" unless="${local.build}">
 		<property name="tapRepo"	value="git@github.com:Ortus-Solutions/homebrew-boxtap.git"/>

		<!-- Grab the checksum again for our build files -->
		<checksum file="${dist.dir}/${distro.name}-bin-${commandbox.version}.zip" property="commandbox.sha256" algorithm="SHA-256"/>
		<checksum file="${dist.dir}/${distro.name}-apidocs-${commandbox.version}.zip" property="commandbox.apidocs.sha256" algorithm="SHA-256"/>

		<!-- Retrieve our stable version checksums -->
		<loadresource property="commandbox.stablesha256">
			<file file="${artifact.baseDir}/${distro.groupID}/${distro.name}/${commandbox.stableVersion}/commandbox-bin-${commandbox.stableVersion}.zip.sha256"/>
			<filterchain>
				<striplinebreaks/>
				<trim/>
			</filterchain>
		</loadresource>

		<loadresource property="commandbox.apidocs.stablesha256">
		 	<file file="${artifact.baseDir}/${distro.groupID}/${distro.name}/${commandbox.stableVersion}/commandbox-apidocs-${commandbox.stableVersion}.zip.sha256"/>
			<filterchain>
				<striplinebreaks/>
				<trim/>
			</filterchain>
		</loadresource>

		<!-- copy over prd file -->
		<copy file="brew-template.rb"
			  tofile="${dist.dir}/commandbox.rb"
			  overwrite="true"
			  encoding="UTF-8" />

		<replace file="${dist.dir}/commandbox.rb" value="" summary="yes" encoding="UTF-8">
		  	<replacetoken>@be@</replacetoken>
		</replace>
		<replace file="${dist.dir}/commandbox.rb" value="${commandbox.stableVersion}" summary="yes" encoding="UTF-8">
		  	<replacetoken>@stable-version@</replacetoken>
		</replace>
		<replace file="${dist.dir}/commandbox.rb" value="${commandbox.stablesha256}" summary="yes" encoding="UTF-8">
		  	<replacetoken>@stable-sha256@</replacetoken>
		</replace>
		<replace file="${dist.dir}/commandbox.rb" value="${commandbox.version}" summary="yes" encoding="UTF-8">
		  	<replacetoken>@version@</replacetoken>
		</replace>
		<replace file="${dist.dir}/commandbox.rb" value="${ortus.repoPRDURL}" summary="yes" encoding="UTF-8">
		  	<replacetoken>@repoPRDURL@</replacetoken>
		</replace>
		<replace file="${dist.dir}/commandbox.rb" value="${ortus.repoURL}" summary="yes" encoding="UTF-8">
		  	<replacetoken>@repoURL@</replacetoken>
		</replace>
		<replace file="${dist.dir}/commandbox.rb" value="${commandbox.sha256}" summary="yes" encoding="UTF-8">
		  	<replacetoken>@sha256@</replacetoken>
		</replace>
		<replace file="${dist.dir}/commandbox.rb" value="${commandbox.apidocs.stablesha256}" summary="yes" encoding="UTF-8">
		  	<replacetoken>@apidocs.stable-sha256@</replacetoken>
		</replace>
		<replace file="${dist.dir}/commandbox.rb" value="${build.number}" summary="yes" encoding="UTF-8">
		  	<replacetoken>@buildnumber@</replacetoken>
		</replace>

		<!-- Pull and Commit Our Tap Repo -->
		<macrodef name="git">
			<attribute name="command" />
			<attribute name="dir" default="${dist.dir}" />
			<element name="args" optional="true" />
			<sequential>
				<echo message="git @{command}" />
				<exec executable="git" dir="@{dir}" failonerror="true">
					<!--<arg value="git" />-->
					<arg value="@{command}" />
					<args/>
				</exec>
			</sequential>
		</macrodef>

		<git command="clone">
			<args>
				<arg value="${tapRepo}"/>
			</args>
		</git>

		<!-- Ensure write perms
		<exec executable="sudo" dir="${dist.dir}" failonerror="true">
			<arg value="chmod" />
			<arg value="-R" />
			<arg value="777" />
			<arg value="./homebrew-boxtap" />
		</exec>-->
		<chmod file="${dist.dir}/homebrew-boxtap" perm="777" type="both" />

		<copy file="${dist.dir}/commandbox.rb"
			  tofile="${dist.dir}/homebrew-boxtap/commandbox.rb"
			  overwrite="true"
			  encoding="UTF-8" />

		<property name="commit-message"	value="CommandBox Build #${build.number}: Release @ ${commandbox.stableVersion}/Devel @ ${commandbox.version}"/>

		<git command="add" dir="${dist.dir}/homebrew-boxtap">
			<args>
				<arg value="--all"/>
			</args>
		</git>


		<git command="commit" dir="${dist.dir}/homebrew-boxtap">
			<args>
				<arg value="--allow-empty"/>
				<arg value="-m ${commit-message}" />
			</args>
		</git>


		<git command="push" dir="${dist.dir}/homebrew-boxtap" />

		<!-- Ensure perms allow us to delete since GIT is running as sudo-er
		<exec executable="sudo" dir="${dist.dir}" failonerror="true">
			<arg value="chmod" />
			<arg value="-R" />
			<arg value="777" />
			<arg value="./homebrew-boxtap" />
		</exec> -->
		<chmod file="${dist.dir}/homebrew-boxtap" perm="777" type="both" />

		<delete dir="${dist.dir}/homebrew-boxtap"/>

 	</target>

 	<!-- Build API Docs -->
 	<target name="build.apidocs" description="Builds the api docs" depends="build.cli.bin" unless="${local.build}">
 		<!-- Create APIDocs dir -->
 		<property name="cmdboxhome.arg" value="-CommandBox_home=${build.location}/temp/CommandBoxHome" />
 		<mkdir dir="${temp.dir}/apidocs"/>
 		<!-- Install dependencies for docs -->
		<exec executable="${dist.dir}/box" dir="${dir.apidocs}">
			<arg line="${cmdboxhome.arg} install" />
		</exec>
 		<!-- Ensure server isn't still running -->
		<exec executable="${dist.dir}/box" dir="${dir.apidocs}">
			<arg line="${cmdboxhome.arg} server stop" />
		</exec>
		<!-- Startup the apidocs server, wait for a few seconds for server to start -->
		<exec executable="${dist.dir}/box" dir="${dir.apidocs}">
			<arg line="${cmdboxhome.arg} server start openbrowser=false --force port=${apidocs.port} --noSaveSettings --debug --noTrayEnable" />
		</exec>
		<sleep seconds="5"/>

		<!-- Get the apidocs now -->
		<property name="temp.dir.absolute" location="${temp.dir}"/>
		<get dest="${temp.dir}/docbox.html"
			 src="${url.apidocs}/index.cfm?version=${commandbox.version}&amp;path=${temp.dir.absolute}/apidocs"
			 verbose="true"
			 retries="5"/>
		<delete file="${temp.dir}/docbox.html" />

		<!-- Zip API Docs -->
		<zip destfile="${dist.dir}/${distro.name}-apidocs-${commandbox.version}.zip" basedir="${temp.dir}/apidocs"></zip>
 		<!-- Build Checksum -->
 		<checksum forceoverwrite="true" fileext=".md5" file="${dist.dir}/${distro.name}-apidocs-${commandbox.version}.zip" />
 		<checksum forceoverwrite="true" algorithm="sha" file="${dist.dir}/${distro.name}-apidocs-${commandbox.version}.zip" />
		<checksum forceoverwrite="true" file="${dist.dir}/${distro.name}-apidocs-${commandbox.version}.zip" algorithm="SHA-256" fileext=".sha256"/>

 		<!-- Wipe & recreate for core API docs -->
 		<delete dir="${temp.dir}/apidocs" />
 		<mkdir dir="${temp.dir}/apidocs"/>
 		<get dest="${temp.dir}/docbox.html"
			 src="${url.apidocs}/internal.cfm?version=${commandbox.version}&amp;path=${temp.dir.absolute}/apidocs"
			 verbose="true"
			 retries="5"
			 ignoreerrors="true" />

		<delete file="${temp.dir}/docbox.html" />

 		<!-- stop server -->
		<exec executable="${dist.dir}/box" dir="${dir.apidocs}">
			<arg line="${cmdboxhome.arg} server log" />
		</exec>

		<!-- Zip API Docs -->
		<zip destfile="${dist.dir}/${distro.name}-core-apidocs-${commandbox.version}.zip" basedir="${temp.dir}/apidocs"></zip>
 		<!-- Build Checksum -->
 		<checksum forceoverwrite="true" fileext=".md5" file="${dist.dir}/${distro.name}-core-apidocs-${commandbox.version}.zip" />
 		<checksum forceoverwrite="true" algorithm="sha" file="${dist.dir}/${distro.name}-core-apidocs-${commandbox.version}.zip" />
		<checksum forceoverwrite="true" file="${dist.dir}/${distro.name}-core-apidocs-${commandbox.version}.zip" algorithm="SHA-256" fileext=".sha256"/>

 		<!-- stop server -->
		<exec executable="${dist.dir}/box" dir="${dir.apidocs}">
			<arg line="${cmdboxhome.arg} server stop" />
		</exec>
 	</target>

	<!-- Build linux/mac bin -->
	<target name="build.cli.bin" description="create linux/mac binary" depends="build.cli">

		<!--  this bundles the jar into the executable wrapper, which is a bash script -->
        <concat destfile="${dist.dir}/box" force="yes" binary="true">
          <fileset file="${src.dir}/bin/box.sh" />
          <fileset file="${dist.dir}/box.jar" />
        </concat>

		<!--  this bundles the thin jar into the executable wrapper, which is a bash script -->
        <concat destfile="${dist.dir}/box-thin" force="yes" binary="true">
          <fileset file="${src.dir}/bin/box.sh" />
          <fileset file="${dist.dir}/box-thin.jar" />
        </concat>

		<!--  this bundles the light jar into the executable wrapper, which is a bash script -->
        <concat destfile="${dist.dir}/box-light" force="yes" binary="true">
          <fileset file="${src.dir}/bin/box.sh" />
          <fileset file="${dist.dir}/box-light.jar" />
        </concat>

        <!-- Change execute perm -->
        <chmod file="${dist.dir}/box" perm="755"/>
        <chmod file="${dist.dir}/box-light" perm="755"/>
        <chmod file="${dist.dir}/box-thin" perm="755"/>

		<checksum file="${dist.dir}/box-light" forceoverwrite="true" fileext=".md5" />
		<checksum file="${dist.dir}/box-light" forceoverwrite="true" algorithm="sha" />
		<checksum file="${dist.dir}/box-light" forceoverwrite="true" algorithm="SHA-256" fileext=".sha256"/>

		<checksum file="${dist.dir}/box-thin" forceoverwrite="true" fileext=".md5" />
		<checksum file="${dist.dir}/box-thin" forceoverwrite="true" algorithm="sha" />
		<checksum file="${dist.dir}/box-thin" forceoverwrite="true" algorithm="SHA-256" fileext=".sha256"/>

        <!-- Create distro zip -->
		<zip destfile="${dist.dir}/${distro.name}-bin-${commandbox.version}.zip" level="9" update="false">
	        <zipfileset file="${dist.dir}/box" filemode="711" prefix="" />
		</zip>

		<!-- Build SDK format. Same file/zip but with folders.] -->
		<mkdir dir="${temp.dir}/sdk-bin/${distro.name}-${commandbox.version}/bin/"/>
		<copy file="${dist.dir}/box" toDir="${temp.dir}/sdk-bin/${distro.name}-${commandbox.version}/bin/"/>

        <!-- Create SDK zip -->
		<zip destfile="${dist.dir}/${distro.name}-sdk-bin-${commandbox.version}.zip" level="9" update="false">
	        <zipfileset dir="${temp.dir}/sdk-bin/" filemode="711" />
		</zip>

		<!-- Build Checksum -->
		<checksum file="${dist.dir}/${distro.name}-bin-${commandbox.version}.zip" forceoverwrite="true" fileext=".md5" />
		<checksum file="${dist.dir}/${distro.name}-bin-${commandbox.version}.zip" forceoverwrite="true" algorithm="sha" />
		<checksum file="${dist.dir}/${distro.name}-bin-${commandbox.version}.zip" forceoverwrite="true" algorithm="SHA-256" fileext=".sha256"/>
		<checksum file="${dist.dir}/${distro.name}-sdk-bin-${commandbox.version}.zip" forceoverwrite="true" fileext=".md5" />
		<checksum file="${dist.dir}/${distro.name}-sdk-bin-${commandbox.version}.zip" forceoverwrite="true" algorithm="sha" />
		<checksum file="${dist.dir}/${distro.name}-sdk-bin-${commandbox.version}.zip" forceoverwrite="true" algorithm="SHA-256" fileext=".sha256"/>
 	</target>

	<!-- Build windows executable -->
	<target name="build.cli.exe" description="create exe wrapper" depends="build.cli" >
        <!-- Get OS version of launch4j -->
        <antcall target="getlaunch4j" />
        <!-- Build Executable Now -->
        <taskdef name="launch4j"
        		 classname="net.sf.launch4j.ant.Launch4jTask"
        		 classpath="./launch4j-${launch4j.version}/launch4j/launch4j.jar:./launch4j-${launch4j.version}/launch4j/lib/xstream.jar" />

        <launch4j>
			<config headerType="console"
					outfile="${dist.dir}/box.exe"
					jarPath="${dist.dir}/box.jar"
					errTitle="Error running CommandBox"
					supportURL="${commandbox.supportURL}"
					chdir="%OLDPWD%"
					icon="${src.dir}/resources/box.ico"
					stayAlive="true">
					<jre path="./jre/;%JAVA_HOME%;%JRE_HOME%;%JDK_HOME%;%PATH%" minVersion="1.8.0" maxVersion="15.0.0" />
					<versionInfo fileVersion="${commandbox.version.noPrereleaseID}.0"
								 txtFileVersion="${commandbox.version}.${build.number}"
								 fileDescription="${commandbox.description}"
								 copyright="Copyright since 2013 Ortus Solutions, Corp"
								 productVersion="${commandbox.version.noPrereleaseID}.0"
								 txtProductVersion="${commandbox.version}.${build.number}"
								 productName="CommandBox"
								 companyName="Ortus Solutions, Corp"
								 internalName="CommandBox"
								 originalFilename="box.exe" />
			</config>
		</launch4j>

        <launch4j>
			<config headerType="console"
					outfile="${dist.dir}/box-thin.exe"
					jarPath="${dist.dir}/box-thin.jar"
					errTitle="Error running CommandBox"
					supportURL="${commandbox.supportURL}"
					chdir="%OLDPWD%"
					icon="${src.dir}/resources/box.ico"
					stayAlive="true">
					<jre path="./jre/" minVersion="1.8.0" />
					<versionInfo fileVersion="${commandbox.version.noPrereleaseID}.0"
								 txtFileVersion="${commandbox.version}.${build.number}"
								 fileDescription="${commandbox.description}"
								 copyright="Copyright since 2013 Ortus Solutions, Corp"
								 productVersion="${commandbox.version.noPrereleaseID}.0"
								 txtProductVersion="${commandbox.version}.${build.number}"
								 productName="CommandBox-thin"
								 companyName="Ortus Solutions, Corp"
								 internalName="CommandBox-thin"
								 originalFilename="box-thin.exe" />
			</config>
		</launch4j>

        <launch4j>
			<config headerType="console"
					outfile="${dist.dir}/box-light.exe"
					jarPath="${dist.dir}/box-light.jar"
					errTitle="Error running CommandBox"
					supportURL="${commandbox.supportURL}"
					chdir="%OLDPWD%"
					icon="${src.dir}/resources/box.ico"
					stayAlive="true">
					<jre path="./jre/" minVersion="1.8.0" />
					<versionInfo fileVersion="${commandbox.version.noPrereleaseID}.0"
								 txtFileVersion="${commandbox.version}.${build.number}"
								 fileDescription="${commandbox.description}"
								 copyright="Copyright since 2013 Ortus Solutions, Corp"
								 productVersion="${commandbox.version.noPrereleaseID}.0"
								 txtProductVersion="${commandbox.version}.${build.number}"
								 productName="CommandBox-light"
								 companyName="Ortus Solutions, Corp"
								 internalName="CommandBox-light"
								 originalFilename="box-light.exe" />
			</config>
		</launch4j>

		<!-- Zip it -->
		<zip destfile="${dist.dir}/${distro.name}-win-${commandbox.version}.zip" level="9" update="false">
	        <zipfileset file="${dist.dir}/box.exe" prefix="" />
		</zip>
		<!-- Build Checksum -->
		<checksum file="${dist.dir}/${distro.name}-win-${commandbox.version}.zip" forceoverwrite="true" fileext=".md5" />
		<checksum file="${dist.dir}/${distro.name}-win-${commandbox.version}.zip" forceoverwrite="true" algorithm="sha" />
		<checksum file="${dist.dir}/${distro.name}-win-${commandbox.version}.zip" forceoverwrite="true" algorithm="SHA-256" fileext=".sha256"/>
	</target>

	<!-- Build including JREs -->
 	<target name="build.cli.jre" description="Build with JRE included"><!--  depends="build.cli.bin,build.cli.exe" if="${isStable}" -->
 		<echo message="Bundling ${jre.version} JRE" />

		<mkdir dir="JREs"/>

		<urlencode name="jre.version.escaped" value="${jre.version}" />

		<!-- Get JRE Dependencies -->

		<antcontrib:if>
	        <available file="JREs/jre_${jre.version}_linux_x64.tar.gz" />
	        <then><echo>Linux x64 JRE found!</echo></then>
	        <else>
	            <echo>Linux x64 JRE not found, downloading artifact</echo>

				<mkdir dir="JREs/jre_${jre.version}_linux_x64"/>

				<get src="https://api.adoptium.net/v3/binary/version/${jre.version.escaped}/linux/x64/jre/hotspot/normal/eclipse"
					 dest="JREs/jre_${jre.version}_linux_x64.tar.gz"
					 verbose="true" />

				<gunzip src="JREs/jre_${jre.version}_linux_x64.tar.gz"/>
				<untar src="JREs/jre_${jre.version}_linux_x64.tar" dest="JREs\jre_${jre.version}_linux_x64"/>

	        </else>
	    </antcontrib:if>

		<antcontrib:if>
	        <available file="JREs/jre_${jre.version}_windows_x64.zip" />
	        <then><echo>Windows x64 JRE found!</echo></then>
	        <else>
	            <echo>Windows x64 JRE not found, downloading artifact</echo>

				<mkdir dir="JREs/jre_${jre.version}_windows_x64"/>

				<get src="https://api.adoptium.net/v3/binary/version/${jre.version.escaped}/windows/x64/jre/hotspot/normal/eclipse"
					 dest="JREs/jre_${jre.version}_windows_x64.zip"
					 verbose="true" />
				<unzip src="JREs/jre_${jre.version}_windows_x64.zip" dest="JREs\jre_${jre.version}_windows_x64/" overwrite="true"/>
	        </else>
	    </antcontrib:if>

		<antcontrib:if>
	        <available file="JREs/jre_jdk-11.0.14.1+1_windows_x32.zip" />
	        <then><echo>Windows x32 JRE found!</echo></then>
	        <else>
	            <echo>Windows x32 JRE not found, downloading artifact</echo>

				<mkdir dir="JREs/jre_jdk-11.0.14.1+1_windows_x32"/>

				<get src="https://api.adoptium.net/v3/binary/version/jdk-11.0.14.1%2B1/windows/x32/jre/hotspot/normal/eclipse"
					 dest="JREs/jre_jdk-11.0.14.1+1_windows_x32.zip"
					 verbose="true" />
				<unzip src="JREs/jre_jdk-11.0.14.1+1_windows_x32.zip" dest="JREs\jre_jdk-11.0.14.1+1_windows_x32/" overwrite="true"/>
	        </else>
	    </antcontrib:if>

		<antcontrib:if>
	        <available file="JREs/jre_${jre.version}_mac_x64.tar.gz" />
	        <then><echo>Mac x64 JRE found!</echo></then>
	        <else>
	            <echo>Mac x64 JRE not found, downloading artifact</echo>

				<mkdir dir="JREs/jre_${jre.version}_mac_x64"/>

				<get src="https://api.adoptium.net/v3/binary/version/${jre.version.escaped}/mac/x64/jre/hotspot/normal/eclipse"
					 dest="JREs/jre_${jre.version}_mac_x64.tar.gz"
					 verbose="true" />

				<gunzip src="JREs/jre_${jre.version}_mac_x64.tar.gz"/>
				<untar src="JREs/jre_${jre.version}_mac_x64.tar" dest="JREs\jre_${jre.version}_mac_x64"/>
	        </else>
	    </antcontrib:if>

		<!-- /Contents/Home -->

		<!--Zip Box Binary With JRE -->
		<zip destfile="${dist.dir}/${distro.name}-jre-win32-${commandbox.version}.zip" level="9" update="true">
			<zipfileset prefix="jre" dir="JREs\jre_jdk-11.0.14.1+1_windows_x32/jdk-11.0.14.1+1-jre/"/>
	        <fileset file="${dist.dir}/box.exe" />
		</zip>
		<zip destfile="${dist.dir}/${distro.name}-jre-win64-${commandbox.version}.zip" level="9" update="true">
			<zipfileset prefix="jre" dir="JREs\jre_${jre.version}_windows_x64/${jre.version}-jre/"/>
	        <fileset file="${dist.dir}/box.exe" />
		</zip>
		<!-- <zip destfile="${dist.dir}/${distro.name}-jre-linux32-${commandbox.version}.zip" level="9" update="true">
			<zipfileset prefix="jre" dir="${maven.repo.local}/oracle/jre/${jre.version}/jre-${jre.version}-linux32.zip"/>
      	    <zipfileset file="${dist.dir}/box" filemode="711" prefix="" />
		</zip> -->
		<zip destfile="${dist.dir}/${distro.name}-jre-linux64-${commandbox.version}.zip" level="9" update="true">
			<zipfileset prefix="jre" dir="JREs\jre_${jre.version}_linux_x64/${jre.version}-jre/" filemode="711" />
      	    <zipfileset file="${dist.dir}/box" filemode="711" prefix="" />
		</zip>
		<zip destfile="${dist.dir}/${distro.name}-jre-darwin64-${commandbox.version}.zip" level="9" update="true">
			<zipfileset prefix="jre" dir="JREs\jre_${jre.version}_mac_x64/${jre.version}-jre/Contents/Home/" filemode="711" />
  		    <zipfileset file="${dist.dir}/box" filemode="711" prefix="" />
		</zip>

		<!-- Build Checksum -->
		<checksum forceoverwrite="true" fileext=".md5">
			<fileset dir="${dist.dir}">
				<include name="*-jre-*.zip" />
			</fileset>
		</checksum>
		<checksum forceoverwrite="true" algorithm="sha">
			<fileset dir="${dist.dir}">
				<include name="*-jre-*.zip" />
			</fileset>
		</checksum>
		<checksum forceoverwrite="true" algorithm="SHA-256" fileext=".sha256">
			<fileset dir="${dist.dir}">
				<include name="*-jre-*.zip" />
			</fileset>
		</checksum>
 	</target>

	<!-- Build local maven repository build.cli.deb,build.cli.exe,build.cli.rpm-->
 	<target name="build.cli.mvn" depends="build.cli.deb,build.cli.exe,build.cli.jre,build.cli.rpm">
		<pom-and-deploy pomid="commandbox.pom" packaging="pom" buildtype="${mvn.type}"
			groupId="com.ortussolutions" artifactId="commandbox" version="${commandbox.version}"
			name="commandbox">
			<attachments>
				<attach file="${dist.dir}/box.jar" type="jar" />
				<attach file="${dist.dir}/${distro.name}-cfml-${commandbox.version}.zip" type="zip" classifier="cfml" />
				<attach file="${dist.dir}/${distro.name}-debian-${commandbox.version}.deb" type="deb" />
				<attach file="${dist.dir}/${distro.name}-bin-${commandbox.version}.zip" type="zip" classifier="bin" />
				<attach file="${dist.dir}/${distro.name}-jre-darwin64-${commandbox.version}.zip" type="zip" classifier="jre-darwin64" />
				<attach file="${dist.dir}/${distro.name}-jre-linux32-${commandbox.version}.zip" type="zip" classifier="jre-linux32" />
				<attach file="${dist.dir}/${distro.name}-jre-linux64-${commandbox.version}.zip" type="zip" classifier="jre-linux64" />
				<attach file="${dist.dir}/${distro.name}-jre-win32-${commandbox.version}.zip" type="zip" classifier="jre-win32" />
				<attach file="${dist.dir}/${distro.name}-jre-win64-${commandbox.version}.zip" type="zip" classifier="jre-win64" />
				<attach file="${dist.dir}/${distro.name}-win-${commandbox.version}.zip" type="zip" classifier="win32" />
				<attach file="${dist.dir}/${distro.name}-rpm-${commandbox.version}.rpm" type="rpm" />
			</attachments>
		</pom-and-deploy>
	</target>

  <target name="build.cli.deb" depends="build.cli.bin" description="builds a .deb file for debian-based systems ONLY!">
    <!-- Load deb task -->
    <taskdef-dependency name="debtask" classname="debrepo.ant.DebTask" artifactId="debrepo" groupId="org.cfmlprojects" version="1.0.0" />
    <mkdir dir="${deb.repo}"/>
    <debtask
        todir="${deb.repo}"
        package="commandbox"
        section="web"
        depends="java-common"
        key="${ortus.sign.key.id}"
        passphrase="${ortus.sign.key.passphrase}"
        keyring="${ortus.sign.keyring}">
        <version upstream="${commandbox.version}"/>
        <maintainer name="${commandbox.packager.name}" email="${commandbox.packager.email}"/>
        <description synopsis="${commandbox.description}">CommandBox Version: ${commandbox.version}.</description>
      <tarfileset file="${dist.dir}/box" prefix="usr/local/bin" filemode="755"/>
    </debtask>
    <!-- Copy deb package to dist dir too -->
    <copy file="${deb.repo}/${distro.name}_${commandbox.version}-1_all.deb" toFile="${dist.dir}/${distro.name}-debian-${commandbox.version}.deb"/>
    <!-- Build Checksum -->
    <checksum file="${dist.dir}/${distro.name}-debian-${commandbox.version}.deb" forceoverwrite="true" fileext=".md5" />
    <checksum file="${dist.dir}/${distro.name}-debian-${commandbox.version}.deb" forceoverwrite="true" algorithm="sha" />
	<checksum file="${dist.dir}/${distro.name}-debian-${commandbox.version}.deb" forceoverwrite="true" algorithm="SHA-256" fileext=".sha256"/>
    <echo message="Updating apt (deb) repo in ${deb.repo}"/>
    <!-- Update Repo -->
    <deb-repo dir="${deb.repo}"
        label="ortus" description="ortussolutions.com debian repository"
        key="${ortus.sign.key.id}"
        passphrase="${ortus.sign.key.passphrase}"
        keyring="${ortus.sign.keyring}" />

		<antcall target="build.cli.deb.stablerepo" />

  </target>

	<target name="build.cli.deb.stablerepo" if="${isStable}">
		<echo>This is a stable build, let's update the stable Debian repo</echo>

    	<mkdir dir="${deb.repo.stable}"/>

	    <!-- Copy deb package to stable dist dir too -->
	    <copy file="${deb.repo}/${distro.name}_${commandbox.version}-1_all.deb" toFile="${deb.repo.stable}/${distro.name}_${commandbox.version}-1_all.deb"/>
	    <copy file="${deb.repo}/${distro.name}_${commandbox.version}-1_all.changes" toFile="${deb.repo.stable}/${distro.name}_${commandbox.version}-1_all.changes"/>

	    <!-- Update stable Repo -->
	    <deb-repo dir="${deb.repo.stable}"
	        label="ortus" description="ortussolutions.com debian repository"
	        key="${ortus.sign.key.id}"
	        passphrase="${ortus.sign.key.passphrase}"
	        keyring="${ortus.sign.keyring}" />
		</target>

  <!-- Build RPM: Leverages redline task -->
  <target name="build.cli.rpm" depends="build.cli.bin">
    <mkdir dir="${rpm.repo}" />
    <echo message="Making rpm in ${rpm.repo} Packager:${commandbox.packager.name} ${commandbox.packager.email} Version: ${commandbox.version}" />
    <!-- execute rpm -->
    <property name="commandbox.rpm.repourl" value="${ortus.repoURL}/RPMS/noarch" />
    <echo message="RPM repository location: ${commandbox.rpm.repourl}"/>
    <rpm-create rpm.repo="${rpm.repo}" rpm.release="1"
      rpm.reponame="ortus" rpm.baseurl="${commandbox.rpm.repourl}"
      rpm.group="com.ortussolutions" rpm.name="${distro.name}" rpm.version="${commandbox.version.noPrereleaseID}"
      rpm.packager="${commandbox.packager.name} ${commandbox.packager.email}"
      rpm.url="${commandbox.supportURL}" failonerror="false"
      rpm.keyring="${ortus.sign.keyring}" rpm.key="${ortus.sign.key.id}"
      rpm.passphrase="${ortus.sign.key.passphrase}">
      <tarfileset file="${dist.dir}/box" prefix="/usr/bin" filemode="755" username="root" group="root"/>
    </rpm-create>
    <!-- Copy rpm to repo -->
    <copy file="${rpm.repo}/${distro.name}-${commandbox.version.noPrereleaseID}-1.noarch.rpm" tofile="${dist.dir}/${distro.name}-rpm-${commandbox.version.noPrereleaseID}.rpm" />
    <!-- Build Checksum -->
    <checksum file="${dist.dir}/${distro.name}-rpm-${commandbox.version.noPrereleaseID}.rpm" forceoverwrite="true" fileext=".md5" />

	<rpm-repo name="${distro.name}" baseurl="${commandbox.rpm.repourl}" dir="${rpm.repo}" failonerror="false"/>

	<antcall target="build.cli.rpm.stablerepo" />

  </target>

	<target name="build.cli.rpm.stablerepo" if="${isStable}">
		<echo message="This is a stable build, let's update the stable RPM repo" />

	    <mkdir dir="${rpm.repo.stable}" />
	    <echo message="Making stable rpm in ${rpm.repo.stable} Packager:${commandbox.packager.name} ${commandbox.packager.email} Version: ${commandbox.version}" />
	    <!-- execute rpm -->
	    <property name="commandbox.rpm.repourl.stable" value="${ortus.repoURL}/RPMS-stable/noarch" />
	    <echo message="RPM repository location: ${commandbox.rpm.repourl.stable}" />
	    <rpm-create rpm.repo="${rpm.repo.stable}" rpm.release="1"
	      rpm.reponame="ortus" rpm.baseurl="${commandbox.rpm.repourl.stable}"
	      rpm.group="com.ortussolutions" rpm.name="${distro.name}" rpm.version="${commandbox.version.noPrereleaseID}"
	      rpm.packager="${commandbox.packager.name} ${commandbox.packager.email}"
	      rpm.url="${commandbox.supportURL}" failonerror="false"
	      rpm.keyring="${ortus.sign.keyring}" rpm.key="${ortus.sign.key.id}"
	      rpm.passphrase="${ortus.sign.key.passphrase}">
	      <tarfileset file="${dist.dir}/box" prefix="/usr/bin" filemode="755" username="root" group="root"/>
	    </rpm-create>

		<rpm-repo name="${distro.name}" baseurl="${commandbox.rpm.repourl.stable}" dir="${rpm.repo.stable}" failonerror="false"/>

	</target>

	<!-- ********************************************************************************************-->
	<!--						DEPENDENCY TARGETS 													 -->
	<!-- ********************************************************************************************-->

	<target name="resolve.libs">
		<delete dir="${lib.dir}"/>
		<delete dir="${extensions.dir}"/>
		<mkdir dir="${extensions.dir}" />

 		<mvn-repo id="jgit-repository" url="https://repo.eclipse.org/content/groups/releases/" />
		<mvn-repo id="sonatype-repository" url="https://oss.sonatype.org/content/repositories/snapshots/" />
		<mvn-repo id="maven-repository" url="https://repo1.maven.org/maven2/" />


		<dependency  groupId="org.jline" artifactId="jline" version="${jline.version}" dest="${lib.dir}" type="jar" unzip="false" repoId="maven-repository" />
		<dependency  groupId="org.fusesource.jansi" artifactId="jansi" version="${jansi.version}" dest="${lib.dir}" type="jar" unzip="false" repoId="maven-repository" />

		<dependency groupId="org.eclipse.jgit" artifactId="org.eclipse.jgit" version="${jgit.version}" dest="${lib.dir}" repoId="jgit-repository" unzip="false" type="jar">
			<exclusions>
				<!-- Lucee already includes these jars -->
				<exclusion groupId="org.slf4j" artifactId="slf4j-api" />
				<exclusion groupId="org.apache.httpcomponents" artifactId="httpclient" />
			</exclusions>
		</dependency>

		<dependency groupId="org.eclipse.jgit" artifactId="org.eclipse.jgit.ssh.jsch" version="${jgit.version}" dest="${lib.dir}" repoId="jgit-repository" unzip="false" type="jar">
			<exclusions>
				<!-- Lucee already includes these jars -->
				<exclusion groupId="org.slf4j" artifactId="slf4j-api" />
				<exclusion groupId="org.apache.httpcomponents" artifactId="httpclient" />
			</exclusions>
		</dependency>

	    <dependency groupId="com.beust" artifactId="jcommander" version="1.47" dest="${lib.dir}" type="jar" unzip="false"/>
	    <dependency groupId="net.minidev" artifactId="json-smart-mini" version="${json-smart-mini.version}" unzip="false" type="jar" dest="${lib.dir}"/>

	    <!-- engine libs -->
	    <!-- stable builds require "maven-repository", and snapshots require "sonatype-repository" -->
	  	<dependency groupId="org.lucee" artifactId="lucee" version="${lucee.version}" dest="${lib.dir}" unzip="false" type="jar" repoId="maven-repository">
			<exclusions>
				<exclusion groupId="org.apache.ant" artifactId="ant" />
				<exclusion groupId="javax.servlet" artifactId="javax.servlet-api" />
				<exclusion groupId="javax.servlet.jsp" artifactId="jsp-api" />
				<exclusion groupId="javax.el" artifactId="javax.el-api" />
				<exclusion groupId="org.apache.felix" artifactId="org.apache.felix.framework" />
				<exclusion groupId="junit" artifactId="junit" />
				<exclusion groupId="org.lucee.lib" artifactId="slf4j-nop" />
				<exclusion groupId="org.lucee" artifactId="log4j-core" />
				<exclusion groupId="org.lucee" artifactId="log4j-api" />
			</exclusions>
		</dependency>

        <antcall target="getrunwar" />

		<get src="http://update.lucee.org/rest/update/provider/light/${lucee.version}"
			 dest="${lib-light.dir}/lucee-light-${lucee.version}.jar"
			 verbose="true" />
		<property name="lucee.light.file" value="${lib-light.dir}/lucee-light-${lucee.version}.jar"/>

		<for list="${cfml.extensions}" param="id">
		  <sequential>
		    <echo>Downloading extension @{id}</echo>

			<get src="http://extension.lucee.org/rest/extension/provider/full/@{id}"
				 dest="${extensions.dir}/@{id}.lex"
				 verbose="true" />

		  </sequential>
		</for>

   </target>

	<!-- Get runwar -->
	<target name="getrunwar" description="Get runwar">
		<!-- do a check -->
		<antcontrib:if>
		   <and>
	       		<available file="runwar/${runwar.version}/runwar-${runwar.version}.jar" />
	       		<not>
		   			<contains string="${runwar.version}" substring="snapshot" casesensitive="false" />
		   		</not>
		   </and>
	        <then>
	        	<echo>Runwar Binary found!</echo>
	        </then>
	        <else>
	            <echo>runwar not found or snapshot build, getting artifact from ${ortus.repoURL}</echo>
	            <mkdir dir="runwar/${runwar.version}" />
				<get src="${ortus.repoURL}/cfmlprojects/runwar/${runwar.version}/runwar-${runwar.version}.jar"
					 dest="runwar/${runwar.version}/runwar-${runwar.version}.jar"
					 verbose="true" />
	        </else>
	    </antcontrib:if>

		<copy file="runwar/${runwar.version}/runwar-${runwar.version}.jar" tofile="${lib.dir}/runwar-${runwar.version}.jar" overwrite="true" />

	</target>

	<!-- Get launch4j -->
	<target name="getlaunch4j" description="Get an OS dependent launch4j into the build directory">
		<!-- do a check -->
		<antcontrib:if>
	        <available file="launch4j-${launch4j.version}/launch4j/launch4j.jar" />
	        <then><echo>Launch4j Binary found!</echo></then>
	        <else>
	            <echo>Launch4j not found, getting artifact from ${ortus.repoURL}</echo>
	            <!-- Determine OS type -->
				<antcontrib:if>
					<os family="windows" />
					<then><property name="launch4j.filename" value="launch4j-${launch4j.version}-win32.zip"/></then>
					<elseif>
						<os family="mac" />
						<then><property name="launch4j.filename" value="launch4j-${launch4j.version}-macosx.tgz"/></then>
					</elseif>
					<elseif>
						<os family="unix" />
						<then><property name="launch4j.filename" value="launch4j-${launch4j.version}-linux.tgz"/></then>
					</elseif>
				</antcontrib:if>
				<echo>Downloading ${launch4j.filename} from ${ortus.repoURL}...</echo>
				<get src="${ortus.repoURL}/launch4j/${launch4j.version}/${launch4j.filename}"
					 dest="."
					 verbose="true" />
				<!-- Unzip according to OS -->
				<antcontrib:if>
					<os family="windows" />
					<then>
						<unzip src="${launch4j.filename}" dest="./launch4j-${launch4j.version}/" overwrite="true"/>
					</then>
					<else>
						<untar src="${launch4j.filename}" dest="./launch4j-${launch4j.version}/" compression="gzip"/>
					</else>
				</antcontrib:if>
				<!-- Removal -->
				<delete file="${launch4j.filename}" />
	        </else>
	    </antcontrib:if>
	    <!-- Add execution perms every time just in case -->
	    <chmod dir="./launch4j-${launch4j.version}/launch4j/bin/" perm="ugo+rwx" includes="*"/>
	</target>

	<!-- ********************************************************************************************-->
	<!--						CUSTOM MACROS    													 -->
	<!-- ********************************************************************************************-->

	<!-- Configure Lucee Web -->
	<macrodef name="configure-lucee-web">
		<attribute name="lucee-jar" default="${lucee.lib.dir}/lucee-jar-${lucee.version}.jar" />
		<attribute name="config-web" />
		<attribute name="config-server" />
		<attribute name="dump-cfc" />
		<sequential>
		  <dependency groupId="org.lucee" artifactId="lucee.config" version="${lucee.config.version}" dest="${temp.dir}/luceeconfigs" unzip="true" type="zip" />
		  <property name="extracted" value="${temp.dir}/luceeconfigs" />
		  <copy file="${extracted}/server.xml" tofile="@{config-server}" overwrite="true" />
		  <copy file="${extracted}/web.xml" tofile="@{config-web}" overwrite="true" />
		</sequential>
	</macrodef>

	<!-- Update Lucee Error Template -->
	<macrodef name="lucee-error-template">
		<attribute name="path" />
		<attribute name="type" default="500" />
		<attribute name="configfile" default="${lucee.config.file}" />
		<sequential>
			<echo>setting lucee template-@{type} to @{path}</echo>
			<antcontrib:var name="lucee.template.error.exists" unset="true" />
			<xmltask source="@{configfile}" dest="@{configfile}">
				<copy path="/*[1]/error/@status-code" attrValue="true" property="lucee.template.error.exists"/>
				<insert path="/*[1]" position="under" unless="lucee.template.error.exists"><![CDATA[<error status-code="true"/>]]></insert>
				<attr path="/*[1]/error" attr="template-@{type}" value="@{path}" />
			</xmltask>
		</sequential>
	</macrodef>

	<!-- Macro to pack jars via java tool -->
	<macrodef name="packjars">
	    <attribute name="dir"/>
	    <attribute name="packdir"/>
		<attribute name="excludes" default=""/>
	    <sequential>
	    	<for param="file">
	    	  <path>
	    	    <fileset dir="@{dir}" includes="*.jar" excludes="@{excludes}"/>
	    	  </path>
	    	  <sequential>
	    	  	<var name="pack200.destdir" unset = "true"/>
	    	  	<property name="pack200.destdir" location="@{packdir}"/>
	    	  	<var name="pack200.destfile" unset = "true"/>
                <basename property="pack200.destfile" file="@{file}" />
	    	  	<echo message="packing @{file}"/>
		        <exec executable="${java.home}/bin/pack200" resultproperty="pack.resultcode">
		            <arg value="${pack200.destdir}/${pack200.destfile}.pack.gz"/>
		            <arg value="@{file}"/>
		        </exec>
	    	  	<if>
	    	  		<equals arg1="${pack.resultcode}" arg2="0" />
	    	  		<else>
	    	  			<copy file="@{file}" todir="@{packdir}" verbose="true"/>
	    	  			<delete file="${pack200.destdir}/${pack200.destfile}.pack.gz" quiet="true" verbose="true"/>
	    	  		</else>
	    	  	</if>
	    	  	<var unset="true" name="pack.resultcode" />
	    	  </sequential>
	    	</for>
	    	<!-- we just copy any excluded jars without packing them -->
    	    <copy todir="@{packdir}">
    	      <fileset dir="@{dir}" includes="@{excludes}"/>
    	    </copy>
	     </sequential>
	</macrodef>

	<!-- ********************************************************************************************-->
	<!--						TEST TARGETS 														 -->
	<!-- ********************************************************************************************-->

	<target name="build.testwar" depends="cfdistro.build" description="creates test war">
		<!-- creates a war for testing in dist/, use 'box-cli runwar.start.fg' to run -->
		<dependency artifactId="testbox" groupId="com.ortussolutions" version="2.4.0-SNAPSHOT" mapping="/testbox" />
		<!-- set mapping for MXUnit compat -->
		<mapping physical="@ext.mappings.dir@/com/ortussolutions/testbox/2.4.0-SNAPSHOT/system/compat" virtual="/mxunit"/>
		<!-- set mappings for sources, tests -->
		<mapping virtual="/commandbox-home" physical="@temp.dir@/cfml" />
		<mapping virtual="/commandbox" physical="@src.dir@/cfml" />
		<mapping virtual="/wirebox" physical="@src.dir@/cfml/system/wirebox" />
		<mapping virtual="/cfml" physical="@src.dir@/cfml" />
		<mapping virtual="/tests" physical="@src.dir@/../tests" />
	</target>

	<target name="test" description="starts test server, runs tests, then stops test server">
		<server-run>
			<testbox-rundirs basePath="${tests.dir}/cfml" componentPath="tests.cfml" outputdir="${dist.dir}/testresults/"
			runner="http://${runwar.host}:${runwar.port}/tests/tboxrunner.cfm?"/>
		</server-run>
	</target>

	<target name="build.test" depends="build.testwar,test" description="build test war, run tests">
		<!-- mostly for automated builds- you really only need to build the testwar once -->
	</target>

	<target name="build.test.all" depends="build.cli.all, build.test">
	</target>

</project>
